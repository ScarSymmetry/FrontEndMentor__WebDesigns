{"version":3,"sources":["sass\\main.scss","sass\\_layout.scss","sass\\_components.scss","sass\\_breakpoints.scss"],"names":[],"mappings":"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","file":"main.925b91f8.css","sourceRoot":"..","sourcesContent":["@import \"breakpoints\";\r\n@import \"layout\";\r\n@import \"components\";\r\n@import url(\"https://fonts.googleapis.com/css2?family=Alata&display=swap\");\r\n@import url(\"https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300&display=swap\");\r\n\r\n* {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n\tbox-sizing: inherit;\r\n}\r\nhtml,\r\nbody {\r\n\toverflow-x: hidden;\r\n}\r\n\r\nhtml {\r\n\tbox-sizing: border-box;\r\n\tfont-size: 62.5%; // 1rem = 10px, 10px/16px = 62.5%\r\n\t@media (min-width: 1366px) {\r\n\t\tfont-size: 75%;\r\n\t}\r\n}\r\n\r\nbody {\r\n\tfont-family: \"Josefin Sans\", sans-serif;\r\n\r\n\tmin-height: 100vh;\r\n}\r\n","$cl-white: hsl(0, 0%, 100%);\r\n$cl-black: hsl(0, 0%, 0%);\r\n$cl-grey: hsl(0, 0%, 55%);\r\n$cl-very-dark-grey: hsl(0, 0%, 41%);\r\n\r\n.container {\r\n\tmax-width: 90%;\r\n\tmargin: 0 auto;\r\n}\r\n\r\n.header {\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\tbackground-image: url(\"../images/mobile/image-hero.jpg\");\r\n\tbackground-color: #71153c;\r\n\tbackground-position: center;\r\n\tbackground-repeat: no-repeat;\r\n\tbackground-size: cover;\r\n\theight: 100vh;\r\n}\r\n\r\n.vr-leader {\r\n\tmargin-top: 10rem;\r\n\twidth: 100%;\r\n}\r\n\r\n.our-creations {\r\n\twidth: 100%;\r\n\tmargin-top: 2.5rem;\r\n}\r\n\r\n.footer {\r\n\twidth: 100%;\r\n\tbackground-color: $cl-black;\r\n\tpadding-bottom: 5rem;\r\n}\r\n",".header-wrapper {\r\n\tposition: absolute;\r\n\tz-index: 100;\r\n\twidth: 90vw;\r\n}\r\n\r\n.header__box {\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\r\n\talign-items: baseline;\r\n\tpadding-top: 2.5rem;\r\n\tpadding-left: 0.5rem;\r\n\tpadding-right: 0.5rem;\r\n}\r\n\r\n.burger {\r\n\tcursor: pointer;\r\n\tbackground-image: url(\"/images/icon-hamburger.svg\");\r\n\tbackground-repeat: no-repeat;\r\n\tbackground-position: center;\r\n\talign-self: center;\r\n\r\n\twidth: 30px;\r\n\theight: 30px;\r\n\t@include media(\">tablet\") {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n\r\n.burger.active {\r\n\tbackground-image: url(\"/images/icon-close.svg\");\r\n}\r\n\r\n.menu.active {\r\n\ttransform: translateX(0);\r\n}\r\n\r\nbody.locked {\r\n\toverflow: hidden;\r\n}\r\n\r\n.menu {\r\n\ttransform: translateX(300%);\r\n\ttransition: all 0.3s ease;\r\n\tposition: absolute;\r\n\tz-index: 1;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\theight: 100vh;\r\n\twidth: 100vw;\r\n\tbackground-color: black;\r\n\tcolor: $cl-white;\r\n\r\n\t@include media(\">tablet\") {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\ttransform: translateX(0);\r\n\t\tz-index: 100;\r\n\t\twidth: max-content;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding-top: 3rem;\r\n\t\tpadding-left: 45vw;\r\n\r\n\t\tbackground-color: transparent;\r\n\t}\r\n\r\n\t&__list {\r\n\t\tmargin-top: 50%;\r\n\t\tmargin-left: 2.5rem;\r\n\t\tlist-style-type: none;\r\n\t\t@include media(\">tablet\") {\r\n\t\t\tdisplay: flex;\r\n\t\t\tmargin: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t&__items {\r\n\t\tposition: relative;\r\n\t\tmargin-top: 2rem;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 2.5rem;\r\n\t\tcursor: pointer;\r\n\r\n\t\t&::after {\r\n\t\t\tcontent: \"\";\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 0;\r\n\t\t\tbottom: 3px;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 1px;\r\n\t\t\tbackground-color: $cl-white;\r\n\r\n\t\t\ttransform: scaleX(0);\r\n\t\t\ttransform-origin: center;\r\n\t\t\ttransition: transform 250ms ease-in;\r\n\t\t}\r\n\r\n\t\t&:hover::after {\r\n\t\t\ttransform: scaleX(1);\r\n\t\t}\r\n\r\n\t\t@include media(\">tablet\") {\r\n\t\t\tmargin: 0;\r\n\t\t\tfont-size: 1.6rem;\r\n\t\t\tpadding: 1rem;\r\n\t\t\ttext-transform: capitalize;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.logo {\r\n\tcursor: pointer;\r\n\tcolor: $cl-white;\r\n\tfont-size: 3rem;\r\n\tfont-family: \"Alata\", sans-serif;\r\n\r\n\tpadding: 0;\r\n\tmargin: 0;\r\n}\r\n\r\n.main-title {\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tright: 50%;\r\n\ttransform: translate(50%, -50%);\r\n\t.title-box {\r\n\t\tfont-weight: 300;\r\n\t\tcolor: $cl-white;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 4rem;\r\n\t\tborder: 2px solid $cl-white;\r\n\t\tpadding: 2.5rem;\r\n\t}\r\n}\r\n\r\n.vr-content {\r\n\twidth: 100%;\r\n\r\n\ttext-align: center;\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr;\r\n\r\n\t@include media(\">tablet\") {\r\n\t\tgrid-template-columns: repeat(8, 1fr);\r\n\t}\r\n\r\n\t&__image {\r\n\t\tmax-width: 100%;\r\n\r\n\t\theight: auto;\r\n\t\tdisplay: block;\r\n\t\t@include media(\">tablet\") {\r\n\t\t\tgrid-column: 1 / 6;\r\n\t\t\tgrid-row: 1 / 3;\r\n\t\t}\r\n\t}\r\n\r\n\t&__banner {\r\n\t\tbackground-color: $cl-white;\r\n\r\n\t\t@include media(\">tablet\") {\r\n\t\t\tgrid-column: 5 / -1;\r\n\t\t\tgrid-row: 2 / 4;\r\n\t\t}\r\n\t\t@include media(\">desktop\") {\r\n\t\t\tgrid-column: 4 / 8;\r\n\t\t\tgrid-row: 2 / 4;\r\n\t\t}\r\n\t}\r\n\r\n\t&__title {\r\n\t\tcolor: $cl-black;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-weight: 300;\r\n\t\tfont-size: 3.3rem;\r\n\t\tpadding-top: 5rem;\r\n\r\n\t\tline-height: 1;\r\n\t}\r\n\r\n\t&__paragraph {\r\n\t\tcolor: $cl-grey;\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 1.5rem;\r\n\t\tline-height: 1.6;\r\n\t\tpadding: 2.4rem;\r\n\t}\r\n}\r\n\r\n.grid-gallery {\r\n\twidth: 100%;\r\n\tdisplay: grid;\r\n\r\n\tjustify-content: center;\r\n\tjustify-items: center;\r\n\r\n\tgap: 35px;\r\n\t@include media(\">=tablet\") {\r\n\t\tgrid-template-columns: repeat(4, 1fr);\r\n\t}\r\n\r\n\t&__title {\r\n\t\tcolor: $cl-black;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-weight: 300;\r\n\t\tfont-size: 3.3rem;\r\n\t\tpadding-top: 5rem;\r\n\r\n\t\tline-height: 1;\r\n\t\t@include media(\">=tablet\") {\r\n\t\t\tgrid-column: 1 / 3;\r\n\t\t\tgrid-row: 1 / 2;\r\n\r\n\t\t\tpadding-top: 1rem;\r\n\t\t}\r\n\t}\r\n\r\n\t&__images {\r\n\t\tgrid-column: 1 / -1;\r\n\t\tjustify-items: center;\r\n\t\twidth: 100%;\r\n\t\tdisplay: grid;\r\n\t\tgap: 20px;\r\n\r\n\t\t@include media(\">=tablet\") {\r\n\t\t\tgrid-template-columns: repeat(4, 1fr);\r\n\t\t}\r\n\t\t@include media(\">desktop\") {\r\n\t\t\tmax-width: 90%;\r\n\t\t}\r\n\t}\r\n\r\n\t&__pics {\r\n\t\tmax-width: 100%;\r\n\t\tfilter: brightness(0.7);\r\n\r\n\t\theight: auto;\r\n\t}\r\n\r\n\t.cta {\r\n\t\talign-self: center;\r\n\t\tjustify-self: center;\r\n\t\ttext-transform: uppercase;\r\n\t\tbackground: transparent;\r\n\t\tfont-family: \"Alata\", sans-serif;\r\n\t\tfont-size: 1.5rem;\r\n\t\tfont-weight: 200;\r\n\t\tletter-spacing: 4px;\r\n\t\tpadding: 1rem 3rem;\r\n\t\tcursor: pointer;\r\n\t\toutline: none;\r\n\t\tborder: 2px solid $cl-black;\r\n\r\n\t\t&:hover {\r\n\t\t\tbackground-color: $cl-black;\r\n\t\t\tcolor: $cl-white;\r\n\t\t\ttransition: 0.3s all ease;\r\n\t\t}\r\n\r\n\t\t@include media(\">=tablet\") {\r\n\t\t\tgrid-column: 4 / 5;\r\n\t\t\tgrid-row: 1 / 2;\r\n\r\n\t\t\tpadding: 0.5rem 2rem;\r\n\t\t}\r\n\t\t@include media(\">desktop\") {\r\n\t\t\tjustify-self: start;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.image-container {\r\n\tposition: relative;\r\n\tz-index: 0;\r\n\r\n\t&:hover > picture {\r\n\t\tfilter: grayscale(60%) contrast(40%) brightness(200%) sepia(20%) blur(1px);\r\n\t\ttransition: all 250ms ease;\r\n\t}\r\n\t&:hover > h2 {\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t&__text {\r\n\t\tz-index: 100;\r\n\t\tposition: absolute;\r\n\t\tbottom: 2rem;\r\n\t\tleft: 3rem;\r\n\t\tcolor: white;\r\n\t\tfont-size: 2.5rem;\r\n\t\tfont-weight: 200;\r\n\t}\r\n}\r\n\r\n.footer-grid {\r\n\ttext-align: center;\r\n\tmargin-top: 7rem;\r\n\tcolor: $cl-white;\r\n\tdisplay: grid;\r\n\tjustify-content: center;\r\n\tjustify-items: center;\r\n\r\n\t@include media(\">=tablet\") {\r\n\t\tgrid-template-columns: repeat(8, 1fr);\r\n\t\talign-items: center;\r\n\t\tpadding-top: 3rem;\r\n\t}\r\n\r\n\t.logo {\r\n\t\tmargin-top: 4rem;\r\n\t\t@include media(\">=tablet\") {\r\n\t\t\talign-self: baseline;\r\n\t\t\tgrid-column: 1 / 2;\r\n\t\t\tgrid-row: 1 / 2;\r\n\t\t\tmargin: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t&__bottom {\r\n\t\tcursor: pointer;\r\n\t\tmargin-top: 2rem;\r\n\t\tmargin-bottom: 3rem;\r\n\t\tlist-style-type: none;\r\n\r\n\t\t@include media(\">=tablet\") {\r\n\t\t\tdisplay: flex;\r\n\t\t\tgrid-column: 1 / 3;\r\n\t\t\tgrid-row: 2 / 3;\r\n\t\t\tmargin: 0;\r\n\r\n\t\t\tjustify-self: start;\r\n\t\t\talign-self: center;\r\n\t\t}\r\n\t\t.footer-grid__items {\r\n\t\t\tposition: relative;\r\n\t\t\tfont-size: 1.6rem;\r\n\t\t\tpadding: 1.3rem;\r\n\r\n\t\t\t&::after {\r\n\t\t\t\tcontent: \"\";\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tleft: 0;\r\n\t\t\t\tbottom: 3px;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 1px;\r\n\t\t\t\tbackground-color: $cl-white;\r\n\r\n\t\t\t\ttransform: scaleX(0);\r\n\t\t\t\ttransform-origin: center;\r\n\t\t\t\ttransition: transform 250ms ease-in;\r\n\t\t\t}\r\n\r\n\t\t\t&:hover::after {\r\n\t\t\t\ttransform: scaleX(1);\r\n\t\t\t}\r\n\r\n\t\t\t@include media(\">=tablet\") {\r\n\t\t\t\tfont-size: 1.4rem;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t&__social {\r\n\t\tcursor: pointer;\r\n\t\tpadding: 1rem;\r\n\t\tpadding-bottom: 3rem;\r\n\r\n\t\t@include media(\">=tablet\") {\r\n\t\t\tdisplay: flex;\r\n\t\t\tgrid-column: 8 / -1;\r\n\t\t\tgrid-row: 1 / 2;\r\n\t\t\tjustify-self: end;\r\n\t\t\tpadding-right: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t&__icon {\r\n\t\tpadding: 0.7rem;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.copyright {\r\n\t\tcolor: $cl-grey;\r\n\t\tfont-size: 1.7rem;\r\n\t\tfont-family: \"Alata\" sans-serif;\r\n\t\t@include media(\">=tablet\") {\r\n\t\t\tjustify-self: end;\r\n\t\t\tgrid-column: 7 / -1;\r\n\t\t\tgrid-row: 2 / 3;\r\n\t\t\tfont-size: 1.3rem;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.attribution {\r\n\tbackground-color: $cl-black;\r\n\tcolor: $cl-white;\r\n\twidth: 100%;\r\n\tmargin: 0 auto;\r\n\tpadding-bottom: 1rem;\r\n\ttext-align: center;\r\n\tfont-size: 1.1rem;\r\n}\r\n","$breakpoints: (\r\n\t\"phone\": 375px,\r\n\t\"tablet\": 768px,\r\n\t\"desktop\": 1366px,\r\n\t\"LGdesktop\": 1920px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///\t\t'retina2x': (\r\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\r\n///\t\t\t'(min-resolution: 192dpi)'\r\n///\t\t)\r\n///\t);\r\n///\r\n$media-expressions: (\r\n\t\"screen\": \"screen\",\r\n\t\"print\": \"print\",\r\n\t\"handheld\": \"handheld\",\r\n\t\"retina2x\": (\r\n\t\t\"(-webkit-min-device-pixel-ratio: 2)\",\r\n\t\t\"(min-resolution: 192dpi)\",\r\n\t),\r\n\t\"retina3x\": (\r\n\t\t\"(-webkit-min-device-pixel-ratio: 3)\",\r\n\t\t\"(min-resolution: 350dpi)\",\r\n\t),\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media(\">128px\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media(\">20em\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media(\">2.0rem\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n\t\"px\": 1,\r\n\t\"em\": 0.01,\r\n\t\"rem\": 0.1,\r\n) !default;\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {List}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media(\">phone\") { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media(\">phone\", \"<=tablet\") { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media(\">=358px\", \"<850px\") { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media(\">desktop\", \"<=1350px\") { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media(\"retina2x\") { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\r\n///\r\n@mixin media($conditions...) {\r\n\t@for $i from 1 through length($conditions) {\r\n\t\t$conditions: set-nth(\r\n\t\t\t$conditions,\r\n\t\t\t$i,\r\n\t\t\tparse-expression(nth($conditions, $i))\r\n\t\t);\r\n\t}\r\n\r\n\t$branches: get-query-branches($conditions);\r\n\t$query: \"\";\r\n\r\n\t@each $branch in $branches {\r\n\t\t@if (str-length($query) != 0) {\r\n\t\t\t$query: $query + \", \";\r\n\t\t}\r\n\r\n\t\t$query: $query + $branch;\r\n\t}\r\n\r\n\t@media #{$query} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n///\r\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {List}   $expressions  - list of expressions\r\n///\r\n/// @throws `$expression` is not a valid expression\r\n///\r\n/// @return {List | Null}\r\n///\r\n@function get-query-branches($expressions) {\r\n\t$result: \"\";\r\n\t$has-groups: false;\r\n\r\n\t// Getting initial snapshot and looking for groups\r\n\t@each $expression in $expressions {\r\n\t\t@if (str-length($result) != 0) {\r\n\t\t\t$result: $result + \" and \";\r\n\t\t}\r\n\r\n\t\t@if (type-of($expression) == \"string\") {\r\n\t\t\t$result: $result + $expression;\r\n\t\t} @else if (type-of($expression) == \"list\") {\r\n\t\t\t$result: $result + nth($expression, 1);\r\n\t\t\t$has-groups: true;\r\n\t\t} @else {\r\n\t\t\t@warn '#{$expression} is not a valid expression.';\r\n\t\t}\r\n\t}\r\n\r\n\t// If we have groups, we have to create all possible combinations\r\n\t@if $has-groups {\r\n\t\t@each $expression in $expressions {\r\n\t\t\t@if (type-of($expression) == \"list\") {\r\n\t\t\t\t$first: nth($expression, 1);\r\n\r\n\t\t\t\t@each $member in $expression {\r\n\t\t\t\t\t@if ($member != $first) {\r\n\t\t\t\t\t\t@each $partial in $result {\r\n\t\t\t\t\t\t\t$result: join(\r\n\t\t\t\t\t\t\t\t$result,\r\n\t\t\t\t\t\t\t\tstr-replace-first($first, $member, $partial)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@return $result;\r\n}\r\n\r\n///\r\n/// Parses a string to form a media query expression\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {String}   $expression  - expression (in string)\r\n///\r\n/// @throws Expression with type `type-of($expression)` detected, string expected\r\n/// @throws `$expression` is missing an operator\r\n/// @throws Unknown unit: `$unit`\r\n///\r\n/// @return {String | Null}\r\n///\r\n@function parse-expression($expression) {\r\n\t$operator: \"\";\r\n\t$value: \"\";\r\n\t$element: \"\";\r\n\t$result: \"\";\r\n\t$is-width: true;\r\n\r\n\t@if (type-of($expression) != \"string\") {\r\n\t\t@warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n\t}\r\n\r\n\t// Separating the operator from the rest of the expression\r\n\t@if (str-slice($expression, 2, 2) == \"=\") {\r\n\t\t$operator: str-slice($expression, 1, 2);\r\n\t\t$value: str-slice($expression, 3);\r\n\t} @else {\r\n\t\t$operator: str-slice($expression, 1, 1);\r\n\t\t$value: str-slice($expression, 2);\r\n\t}\r\n\r\n\t// Checking what type of expression we're dealing with\r\n\t@if map-has-key($breakpoints, $value) {\r\n\t\t$result: map-get($breakpoints, $value);\r\n\t} @else if map-has-key($media-expressions, $expression) {\r\n\t\t$result: map-get($media-expressions, $expression);\r\n\t\t$is-width: false;\r\n\t} @else {\r\n\t\t$result: to-number($value);\r\n\t}\r\n\r\n\t@if ($is-width) {\r\n\t\t$unit: unit($result);\r\n\t\t$interval: 0;\r\n\r\n\t\t@if (map-has-key($unit-intervals, $unit)) {\r\n\t\t\t$interval: map-get($unit-intervals, $unit);\r\n\t\t} @else {\r\n\t\t\t@warn 'Unknown unit: #{$unit}';\r\n\t\t}\r\n\r\n\t\t@if ($operator == \">\") {\r\n\t\t\t$element: \"(min-width: #{$result + $interval})\";\r\n\t\t} @else if ($operator == \"<\") {\r\n\t\t\t$element: \"(max-width: #{$result - $interval})\";\r\n\t\t} @else if ($operator == \">=\") {\r\n\t\t\t$element: \"(min-width: #{$result})\";\r\n\t\t} @else if ($operator == \"<=\") {\r\n\t\t\t$element: \"(max-width: #{$result})\";\r\n\t\t} @else {\r\n\t\t\t@warn '#{$expression} is missing an operator.';\r\n\t\t}\r\n\t} @else {\r\n\t\t$element: $result;\r\n\t}\r\n\r\n\t@return $element;\r\n}\r\n\r\n///\r\n/// Replaces the first occurence of the string with the replacement string\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {String}   $search  - The value being searched for\r\n/// @param {String}   $replace  - The replacement string\r\n/// @param {String}   $subject  - The string being replaced on\r\n///\r\n/// @return {String | Null}\r\n///\r\n@function str-replace-first($search, $replace, $subject) {\r\n\t$search-start: str-index($subject, $search);\r\n\r\n\t@if $search-start == null {\r\n\t\t@return $subject;\r\n\t}\r\n\r\n\t$result: str-slice($subject, 0, $search-start - 1);\r\n\t$result: $result + $replace;\r\n\t$result: $result + str-slice($subject, $search-start + str-length($search));\r\n\r\n\t@return $result;\r\n}\r\n\r\n///\r\n/// Casts a number to a string\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {String}   $string  - Number to be parsed\r\n///\r\n/// @return {List | Null}\r\n///\r\n@function to-number($string) {\r\n\t// Matrices\r\n\t$strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\r\n\t$numbers: 0 1 2 3 4 5 6 7 8 9;\r\n\r\n\t// Result\r\n\t$result: 0;\r\n\t$divider: 0;\r\n\t$minus: false;\r\n\r\n\t// Looping through all characters\r\n\t@for $i from 1 through str-length($string) {\r\n\t\t$character: str-slice($string, $i, $i);\r\n\t\t$index: index($strings, $character);\r\n\r\n\t\t@if $character == \"-\" {\r\n\t\t\t$minus: true;\r\n\t\t} @else if $character == \".\" {\r\n\t\t\t$divider: 1;\r\n\t\t} @else {\r\n\t\t\t@if type-of($index) != \"number\" {\r\n\t\t\t\t$result: if($minus, $result * -1, $result);\r\n\t\t\t\t@return _length($result, str-slice($string, $i));\r\n\t\t\t}\r\n\r\n\t\t\t$number: nth($numbers, $index);\r\n\r\n\t\t\t@if $divider == 0 {\r\n\t\t\t\t$result: $result * 10;\r\n\t\t\t} @else {\r\n\t\t\t\t// Move the decimal dot to the left\r\n\t\t\t\t$divider: $divider * 10;\r\n\t\t\t\t$number: $number / $divider;\r\n\t\t\t}\r\n\r\n\t\t\t$result: $result + $number;\r\n\t\t}\r\n\t}\r\n\r\n\t@return if($minus, $result * -1, $result);\r\n}\r\n\r\n@function _length($number, $unit) {\r\n\t$strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\r\n\t\t\"vh\" \"vmin\" \"vmax\";\r\n\t$units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\r\n\t$index: index($strings, $unit);\r\n\r\n\t@if type-of($index) != \"number\" {\r\n\t\t@warn 'Unknown unit `#{$unit}`.';\r\n\t\t@return false;\r\n\t}\r\n\r\n\t@return $number * nth($units, $index);\r\n}\r\n\r\n/**\r\n*\r\n* Testing\r\n*\r\n**/\r\n"]}